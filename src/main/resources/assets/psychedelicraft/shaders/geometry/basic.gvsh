
ps_in vec2 texCoord0;

uniform sampler2D PS_SurfaceFractalSampler;

uniform float PS_WorldTicks;
uniform vec3 PS_WavesMatrix;
uniform float PS_DistantWorldDeformation;
uniform vec4 PS_SurfaceFractalCoords;
uniform float PS_SurfaceFractalStrength;
uniform float PS_FractalFractureStrength;

uniform vec3 PS_PlayerPosition;

ps_out vec4 vertexColor;
ps_out float vertexDistance;

float PHI = 1.61803398874989484820459;

float gold_noise(vec2 xy, float seed) {
  return fract(tan(distance(xy * PHI, xy) * seed) * xy.x);
}

void main() {
  // we have to write to it so mac is happy
  vertexDistance = 0;
  i_parent_shaders_main();

  float worldTicks = PS_WorldTicks;

  float smallWaves = PS_WavesMatrix[0];
  float bigWaves = PS_WavesMatrix[1];
  float wiggleWaves = PS_WavesMatrix[2];
  float distantWorldDeformation = PS_DistantWorldDeformation;
  float surfaceFractalStrength = PS_SurfaceFractalStrength;

  vec3 playerPos = PS_PlayerPosition;

  float fogFragCoord = length(gl_Position);

  if (surfaceFractalStrength > 0.0) {
    vertexColor = vec4(mix(vertexColor.rgb, texture(PS_SurfaceFractalSampler, vec2(
        mix(PS_SurfaceFractalCoords[0], PS_SurfaceFractalCoords[2], (mod(Position.x + Position.y, 4.0)) / 4.0),
        mix(PS_SurfaceFractalCoords[1], PS_SurfaceFractalCoords[3], (mod(Position.z + Position.y, 4.0)) / 4.0)
    )).rgb, surfaceFractalStrength), vertexColor.a);
  }

  if (smallWaves > 0.0) {
    float w1 = 8.0;

    gl_Position[1] += sin((Position.x + worldTicks / 5.0) / w1 * 3.14159 * 2.0) * sin((Position.z + worldTicks / 5.0) / w1 * 3.14159 * 2.0) * smallWaves * 1.5;
    gl_Position[1] -= sin((playerPos.x + worldTicks / 5.0) / w1 * 3.14159 * 2.0) * sin((playerPos.z + worldTicks / 5.0) / w1 * 3.14159 * 2.0) * smallWaves * 1.5;

    float w2 = 16.0;

    gl_Position.y += sin((Position.x + worldTicks / 8.0) / w2 * 3.14159 * 2.0) * sin((Position.z) / w2 * 3.14159 * 2.0) * smallWaves * 3.0;
    gl_Position.y -= sin((playerPos.x + worldTicks / 8.0) / w2 * 3.14159 * 2.0) * sin((playerPos.z) / w2 * 3.14159 * 2.0) * smallWaves * 3.0;

    gl_Position.x = mix(gl_Position.x, gl_Position[0] * (1.0 + fogFragCoord / 20.0), smallWaves);
    gl_Position.y = mix(gl_Position.y, gl_Position[1] * (1.0 + fogFragCoord / 20.0), smallWaves);
  }

  float fractalFractureStrength = PS_FractalFractureStrength;

  if (fractalFractureStrength > 0) {
    float fractalScollSpeed = worldTicks / 100;
    gl_Position.x += sin(gold_noise(Position.xy, Position.x + fractalScollSpeed)) * fractalFractureStrength;
    gl_Position.y += sin(gold_noise(Position.xy, Position.y + fractalScollSpeed)) * fractalFractureStrength;
  }

  if (wiggleWaves > 0.0) {
    float w1 = 8.0;
    gl_Position.x += sin((Position.y + worldTicks / 8.0) / w1 * 3.14159 * 2.0)
                    * sin((Position.z + worldTicks / 5.0) / w1 * 3.14159 * 2.0)
                    * wiggleWaves;
  }

  if (distantWorldDeformation > 0.0 && fogFragCoord > 5.0) {
    gl_Position.y += (sin(fogFragCoord / 8.0 * 3.14159 * 2.0) + 1.0)
                     * distantWorldDeformation
                     * (fogFragCoord - 5.0) / 8.0;
  }

  if (bigWaves > 0.0) {
    if (gl_Position[2] > 0.1) {
      float dDist = (gl_Position[2] - 0.1) * bigWaves;
      if (gl_Position[2] > 20.0) {
        dDist = (20.0 - 0.1) * bigWaves + (gl_Position.z - 20.0) * bigWaves * 0.3;
      }

      float inf1 = sin(worldTicks * 0.0086465563) * dDist;
      float inf2 = cos(worldTicks * 0.0086465563) * dDist;
      float inf3 = sin(worldTicks * 0.0091033941) * dDist;
      float inf4 = cos(worldTicks * 0.0091033941) * dDist;
      float inf5 = sin(worldTicks * 0.0064566190) * dDist;
      float inf6 = cos(worldTicks * 0.0064566190) * dDist;

      float pMul = 1.3;

      gl_Position.x += sin(gl_Position.z * 0.1 * sin(worldTicks * 0.001849328) + worldTicks * 0.014123412) * 0.5 * inf1 * pMul;
      gl_Position.y += cos(gl_Position.z * 0.1 * sin(worldTicks * 0.001234728) + worldTicks * 0.017481893) * 0.4 * inf1 * pMul;

      gl_Position.x += sin(gl_Position.y * 0.1 * sin(worldTicks * 0.001523784) + worldTicks * 0.021823911) * 0.2 * inf2 * pMul;
      gl_Position.y += sin(gl_Position.x * 0.1 * sin(worldTicks * 0.001472387) + worldTicks * 0.023193141) * 0.08 * inf2 * pMul;

      gl_Position.x += sin(gl_Position.z * 0.15 * sin(worldTicks * 0.001284923) + worldTicks * 0.019404289) * 0.25 * inf3 * pMul;
      gl_Position.y += cos(gl_Position.z * 0.15 * sin(worldTicks * 0.001482938) + worldTicks * 0.018491238) * 0.15 * inf3 * pMul;

      gl_Position.x += sin(gl_Position.y * 0.05 * sin(worldTicks * 0.001283942) + worldTicks * 0.012942342) * 0.4 * inf4 * pMul;
      gl_Position.y += sin(gl_Position.x * 0.05 * sin(worldTicks * 0.001829482) + worldTicks * 0.012981328) * 0.35 * inf4 * pMul;

      gl_Position.z += sin(gl_Position.y * 0.13 * sin(worldTicks * 0.02834472) + worldTicks * 0.023482934) * 0.1 * inf5 * pMul;
      gl_Position.z += sin(gl_Position.x * 0.124 * sin(worldTicks * 0.00184298) + worldTicks * 0.018394082) * 0.05 * inf6 * pMul;
      gl_Position.w += sin(gl_Position.y * 0.13 * sin(worldTicks * 0.02834472) + worldTicks * 0.023482934) * 0.1 * inf5 * pMul;
      gl_Position.w += sin(gl_Position.x * 0.124 * sin(worldTicks * 0.00184298) + worldTicks * 0.018394082) * 0.05 * inf6 * pMul;
    }
  }
}
