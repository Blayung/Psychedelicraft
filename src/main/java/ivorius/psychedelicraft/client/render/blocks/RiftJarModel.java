/*
 *  Copyright (c) 2014, Lukas Tenbrink.
 *  * http://lukas.axxim.net
 */

// Date: 9-3-2014 13:41:43
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package ivorius.psychedelicraft.client.render.blocks;

import ivorius.psychedelicraft.block.entity.RiftJarBlockEntity;
import net.minecraft.client.model.*;
import net.minecraft.client.render.RenderLayer;
import net.minecraft.client.render.VertexConsumer;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.util.math.MathHelper;

/**
 * Updated by Sollace on 5 Jan 2023
 */
public class RiftJarModel extends Model {
    private final ModelPart tree;

    private final ModelPart cork;
    private final ModelPart knot;

    private final ModelPart interior;

    public RiftJarModel(ModelPart tree) {
        super(RenderLayer::getEntityTranslucent);
        this.tree = tree;
        this.cork = tree.getChild("cork");
        this.knot = tree.getChild("knot");
        this.interior = tree.getChild("interior");
    }

    public static TexturedModelData getTexturedModelData() {
        ModelData data = new ModelData();
        ModelPartData root = data.getRoot();
        root.addChild("glass_1", ModelPartBuilder.create().uv(0, 0).mirrored().cuboid(-4F, 0F, -4F, 8, 5, 8), ModelTransform.pivot(0F, 19F, 0F));
        root.addChild("glass_2", ModelPartBuilder.create().uv(0, 14).mirrored().cuboid(-4F, 0F, -4F, 8, 5, 8), ModelTransform.pivot(0F, 12F, 0F));
        root.addChild("glass_3", ModelPartBuilder.create().uv(33, 24).mirrored().cuboid(-3F, 0F, -3F, 6, 2, 6), ModelTransform.pivot(0F, 17F, 0F));

        root.addChild("rope", ModelPartBuilder.create().uv(33, 0).mirrored().cuboid(-3.5F, 0F, -3.5F, 7, 2, 7), ModelTransform.pivot(0F, 17F, 0F));
        root.addChild("knot", ModelPartBuilder.create().uv(33, 2).mirrored().cuboid(0F, 0F, -4F, 0, 5, 8), ModelTransform.of(3.5F, 17F, 0F, 0F, 0F, -0.2602503F));
        root.addChild("cork", ModelPartBuilder.create().uv(33, 16).mirrored().cuboid(-3F, 0F, -3F, 6, 2, 6), ModelTransform.pivot(0F, 10F, 0F));

        Dilation dilation = new Dilation(0.001f);
        root.addChild("interior", ModelPartBuilder.create()
            .cuboid(-4, 0, -4, 8, 5, 8, dilation)
            .cuboid(-3, 5, -3, 6, 2, 6, new Dilation(0.001f, -0.001f, 0.001f))
            .cuboid(-4, 7, -4, 8, 2, 8, dilation), ModelTransform.NONE);

        return TexturedModelData.of(data, 64, 32);
    }

    public void setAngles(RiftJarBlockEntity entity, float tickDelta) {
        cork.pivotX = entity.fractionOpen * 2;
        cork.yaw = entity.fractionOpen * 0.1F;
        knot.roll = -0.2602503F - (entity.fractionHandleUp * (1 + MathHelper.sin(entity.ticksAliveVisual * 0.1f) * 0.1f)) * 0.5f;
    }

    @Override
    public void render(MatrixStack matrices, VertexConsumer vertices, int light, int overlay, float r, float g, float b, float a) {
        interior.hidden = true;
        tree.render(matrices, vertices, light, overlay, r, g, b, a);
        interior.hidden = false;
    }

    public void renderInterior(MatrixStack matrices, VertexConsumer vertices, int light, int overlay, float r, float g, float b, float a) {
        interior.render(matrices, vertices, light, overlay, r, g, b, a);
    }
}
